#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <bits/stdc++.h>
using namespace std;
	string s;
	string t;
class Trie {
    public:
        map<char, Trie> children;
        string value;
        bool flag;
        int occurences=0;

        Trie(const string &);
        void add(char);
        int find(const string &);
        void insert(const string &);
        vector<string> all_prefixes();
        vector<string> autocomplete(const string &);
};

Trie::Trie(const string &val="") {
    value = val;
    flag = false;
}

void Trie::add(char c) {
    if (value == "") 
        children[c] = Trie(string(1, c));
    else
        children[c] = Trie(value + c);
}

int  Trie::find(const string &word) {
    Trie * node = this;
    for (int i = 0; i < word.length(); i++) {
        const char c = word[i];
        if (node->children.find(c) == node->children.end())
            return 0;
        else 
            node = &node->children[c];
    }
    return node->occurences;
}

void Trie::insert(const string &word) {
    Trie * node = this;
    node->occurences++;
    for (int i = 0; i < word.length(); i++) {
        const char c = word[i];
        if (node->children.find(c) == node->children.end())
            node->add(c);
        node = &node->children[c];
         node->occurences++;
    }
   
    node->flag = true;
}

vector<string> Trie::all_prefixes() {
    vector<string> results;
    if (flag)
        results.push_back(value);

    if (children.size() && value !=t) {
        map<char, Trie>::iterator iter;
        vector<string>::iterator node;
        for(iter = children.begin(); iter != children.end(); iter++) {
            vector<string> nodes = iter->second.all_prefixes();
            results.insert(results.end(), nodes.begin(), nodes.end());
        }
    }
    return results;
}

vector<string> Trie::autocomplete(const string &prefix) {
    Trie * node = this;
    vector<string> results;
    for (int i = 0; i < prefix.length(); i++) {
        const char c = prefix[i];
        if (node->children.find(c) == node->children.end())
            return results;
        else 
            node = &node->children[c];
    }
    return node->all_prefixes();
}
int main(){
	Trie o;
	int n;cin>>n;
	for(int i=1;i<=n;i++){
		string s;string t;
		cin>>s>>t;
		if(s=="add"){
		 o.insert(t);
		}
		else {
		int ans=o.find(t);
		  cout<<ans<<endl;
		
	
		
		
	}
}
}
